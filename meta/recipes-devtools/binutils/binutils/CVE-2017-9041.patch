From 607a2dab8d30e176db13874b6cdf5a51646061cd Mon Sep 17 00:00:00 2001
From: Nick Clifton <nickc@redhat.com>
Date: Mon, 3 Apr 2017 11:13:21 +0100
Subject: Fix runtime seg-fault in readelf when parsing a corrupt MIPS binary.

Unavailable data is handled gracefully in MIPS GOT processing done by
`print_mips_got_entry', so all that is needed in special GOT[1] handling
is to verify whether data can be retrieved for the purpose of the GNU
marker check done with `byte_get'.  Remove the extra error reporting
code then, introduced with commit 75ec1fdbb797 ("Fix runtime seg-fault
in readelf when parsing a corrupt MIPS binary.") in the course of
addressing PR binutils/21344, and defer the error case to regular local
GOT entry processing.

	PR binutils/21344
	* readelf.c (process_mips_specific): Check for an out of range GOT
	entry before reading the module pointer.

	binutils/
	* readelf.c (process_mips_specific): Remove error reporting from
	GOT[1] processing.

(cherry picked from commit 75ec1fdbb797a389e4fe4aaf2e15358a070dcc19,
c4ab9505b53cdc899506ed421fddb7e1f8faf7a3)

CVE: CVE-2017-9041
Upstream-Status: Backport[master]
Signed-off-by: Yuanjie Huang <yuanjie.huang@windriver.com>
---
 binutils/ChangeLog | 11 +++++++++++
 binutils/readelf.c |  7 +++++++
 2 files changed, 18 insertions(+)

diff --git a/binutils/ChangeLog b/binutils/ChangeLog
index b857197a3e..527a5d69b2 100644
--- a/binutils/ChangeLog
+++ b/binutils/ChangeLog
@@ -1,3 +1,14 @@
+2017-04-25  Maciej W. Rozycki  <macro@imgtec.com>
+
+	* readelf.c (process_mips_specific): Remove error reporting from
+	GOT[1] processing.
+
+2017-04-03  Nick Clifton  <nickc@redhat.com>
+
+	PR binutils/21344
+	* readelf.c (process_mips_specific): Check for an out of range GOT
+	entry before reading the module pointer.
+
 2017-04-13  Nick Clifton  <nickc@redhat.com>
 
 	PR binutils/21379
diff --git a/binutils/readelf.c b/binutils/readelf.c
index f7256552cf..ec98ba6a78 100644
--- a/binutils/readelf.c
+++ b/binutils/readelf.c
@@ -15013,7 +15013,14 @@ process_mips_specific (FILE * file)
       printf (_(" Lazy resolver\n"));
       if (ent == (bfd_vma) -1)
 	goto got_print_fail;
+
+      /* Check for the MSB of GOT[1] being set, denoting a GNU object.
+	 This entry will be used by some runtime loaders, to store the
+	 module pointer.  Otherwise this is an ordinary local entry.
+	 PR 21344: Check for the entry being fully available before
+	 fetching it.  */
       if (data
+	  && data + ent - pltgot + addr_size <= data_end
 	  && (byte_get (data + ent - pltgot, addr_size)
 	      >> (addr_size * 8 - 1)) != 0)
 	{
-- 
2.11.0

