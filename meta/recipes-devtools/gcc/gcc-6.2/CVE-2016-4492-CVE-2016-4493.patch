From b6616075cb48d42a28cc78ca1c66127b671b361c Mon Sep 17 00:00:00 2001
From: law <law@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Wed, 13 Jul 2016 22:06:09 +0000
Subject: [PATCH] 	PR c++/70926 	* cplus-dem.c: Handle large values
 and overflow when demangling 	length variables. 
 (demangle_template_value_parm): Read only until end of
 mangled string. 	(do_hpacc_template_literal):
 Likewise. 	(do_type): Handle overflow when demangling
 array indices.

git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/trunk@238313 138bc75d-0d04-0410-961f-82ee72b054a4

CVE: CVE-2016-4492 CVE-2016-4493
Upstream-Status: Backport[master]

Signed-off-by: Yue Tao <yue.tao@windriver.com>
---
 libiberty/ChangeLog                   |    9 +++++++++
 libiberty/cplus-dem.c                 |   10 ++++++----
 libiberty/testsuite/demangle-expected |   13 +++++++++++++
 3 files changed, 28 insertions(+), 4 deletions(-)

diff --git a/libiberty/ChangeLog b/libiberty/ChangeLog
index 45b312b..317bd63 100644
--- a/libiberty/ChangeLog
+++ b/libiberty/ChangeLog
@@ -86,6 +86,15 @@
 	(d_template_args_1): Split out from d_template_args.
 	(d_args_length): New.
 
+2016-07-13  Marcel BÃƒhme  <boehme.marcel@gmail.com>
+
+	PR c++/70926
+	* cplus-dem.c: Handle large values and overflow when demangling
+	length variables.
+	(demangle_template_value_parm): Read only until end of mangled string.
+	(do_hpacc_template_literal): Likewise.
+	(do_type): Handle overflow when demangling array indices.
+
 2016-05-19  Jakub Jelinek  <jakub@redhat.com>
 
 	Backported from mainline
diff --git a/libiberty/cplus-dem.c b/libiberty/cplus-dem.c
index d04c32a..3ee2df1 100644
--- a/libiberty/cplus-dem.c
+++ b/libiberty/cplus-dem.c
@@ -2053,7 +2053,8 @@ demangle_template_value_parm (struct work_stuff *work, const char **mangled,
       else
 	{
 	  int symbol_len  = consume_count (mangled);
-	  if (symbol_len == -1)
+	  if (symbol_len == -1
+	      || symbol_len > (long) strlen (*mangled))
 	    return -1;
 	  if (symbol_len == 0)
 	    string_appendn (s, "0", 1);
@@ -3621,7 +3622,7 @@ do_type (struct work_stuff *work, const char **mangled, string *result)
 	/* A back reference to a previously seen type */
 	case 'T':
 	  (*mangled)++;
-	  if (!get_count (mangled, &n) || n >= work -> ntypes)
+	  if (!get_count (mangled, &n) || n < 0 || n >= work -> ntypes)
 	    {
 	      success = 0;
 	    }
@@ -3798,7 +3799,7 @@ do_type (struct work_stuff *work, const char **mangled, string *result)
     /* A back reference to a previously seen squangled type */
     case 'B':
       (*mangled)++;
-      if (!get_count (mangled, &n) || n >= work -> numb)
+      if (!get_count (mangled, &n) || n < 0 || n >= work -> numb)
 	success = 0;
       else
 	string_append (result, work->btypevec[n]);
@@ -4139,7 +4140,8 @@ do_hpacc_template_literal (struct work_stuff *work, const char **mangled,
 
   literal_len = consume_count (mangled);
 
-  if (literal_len <= 0)
+  if (literal_len <= 0
+      || literal_len > (long) strlen (*mangled))
     return 0;
 
   /* Literal parameters are names of arrays, functions, etc.  and the
diff --git a/libiberty/testsuite/demangle-expected b/libiberty/testsuite/demangle-expected
index 62ab18c..1d95952 100644
--- a/libiberty/testsuite/demangle-expected
+++ b/libiberty/testsuite/demangle-expected
@@ -4508,3 +4508,16 @@ _ZdvMMMMMMMMMMMMMrrrrA_DTdvfp_fp_Eededil
 
 _Z1MA_aMMMMA_MMA_MMMMMMMMSt1MS_o11T0000000000t2M0oooozoooo
 _Z1MA_aMMMMA_MMA_MMMMMMMMSt1MS_o11T0000000000t2M0oooozoooo
+#
+# Tests write access violation PR70926
+
+0__Ot2m02R5T0000500000
+0__Ot2m02R5T0000500000
+#
+
+0__GT50000000000_
+0__GT50000000000_
+#
+
+__t2m05B500000000000000000_
+__t2m05B500000000000000000_
-- 
1.7.9.5

